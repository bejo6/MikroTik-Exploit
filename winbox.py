#!/usr/bin/python

# -*- coding: utf-8 -*-

import os
import re
import sys
import logging
import argparse
from utils.helpers import setup_logger, generate_ip
from libs.ip_calc import IPCalc
from libs.mikrotik import Mikrotik

logger = setup_logger(level='info')


def scan(c_mikrotik, c_ipcalc, target):
    if re.match(r'^(\d{1,3}\.?){4}(/\d+)?$', target.strip()):
        info = c_ipcalc.get_info(target)
        if not info:
            logger.error('Invalid target %s' % target)
            return

        total_hosts = info.get('total_hosts')
        usable_hosts = info.get('usable_hosts')
        start_ip = info.get('start_ip')
        end_ip = info.get('end_ip')

        logger.debug('Total Hosts  : %d' % total_hosts)
        logger.debug('Usable Hosts : %d' % usable_hosts)
        logger.debug('Start IP     : %s' % start_ip)
        logger.debug('End IP       : %s' % end_ip)

        if info.get('usable_hosts') > 256:
            while usable_hosts > 0:
                count = 254 if usable_hosts > 254 else usable_hosts
                logger.info('Trying to generate %d IP out of %d total generated IP address' % (count, usable_hosts))
                list_ip, next_ip = generate_ip(start_ip=start_ip, count=count)

                start_ip = next_ip

                if list_ip:
                    for ip in list_ip:
                        c_mikrotik.check(ip)

                usable_hosts -= 254
        else:
            list_ip, _ = generate_ip(start_ip=info.get('start_ip'), count=info.get('usable_hosts'))
            for ip in list_ip:
                c_mikrotik.check(ip)
    else:
        c_mikrotik.check(target)


def main():
    mikrotik = Mikrotik()
    ipcalc = IPCalc(logger=logger)

    parser = argparse.ArgumentParser(usage='%(prog)s [options]')
    # noinspection PyProtectedMember
    parser._optionals.title = 'Options'
    parser.add_argument('-t', '--target',
                        dest='target',
                        help='Target IP Address',
                        action='store')
    parser.add_argument('-l', '--list',
                        dest='list_target',
                        help='Target from file',
                        action='store')
    parser.add_argument('-o', '--output',
                        dest='output_result',
                        help='Output results (default: %s)' % mikrotik.output,
                        action='store')
    parser.add_argument('-d', '--debug',
                        dest='debug_mode',
                        help='Set DEBUG mode',
                        action='store_true')

    args = parser.parse_args()

    if not args.target and not args.list_target:
        parser.print_help()
        sys.exit('[!] Target required')

    if args.debug_mode:
        logger.setLevel(logging.DEBUG)
        mikrotik.debug = True
        mikrotik.init()

    if args.output_result:
        mikrotik.output = args.output_result

    if args.target:
        scan(mikrotik, ipcalc, args.target)
    elif args.list_target:
        if os.path.exists(args.list_target) and os.path.isfile(args.list_target):
            with open(args.list_target, 'r') as fp:
                list_target = fp.read().splitlines()
                for target in list_target:
                    scan(mikrotik, ipcalc, target)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        sys.exit('[!] Stoped')
